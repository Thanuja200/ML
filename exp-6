{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNKkkbUy9IdP7TJnIQAodbB",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Thanuja200/ML/blob/main/exp-6\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "azQo3iF5HFiT"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "# Sample Data\n",
        "data = {\n",
        "'Employee id': [10, 20, 15, 25, 30],\n",
        "'Gender': ['M', 'F', 'F', 'M', 'F'],\n",
        "\n",
        "37\n",
        "\n",
        "'Remarks': ['Good', 'Nice', 'Good', 'Great', 'Nice']\n",
        "}\n",
        "df = pd.DataFrame(data)\n",
        "print(f\"Original Employee Data:\\n{df}\\n\")\n",
        "# Using Pandas get_dummies()\n",
        "df_pandas_encoded = pd.get_dummies(df, columns=['Gender', 'Remarks'], drop_first=True)\n",
        "print(f\"One-Hot Encoded Data using Pandas:\\n{df_pandas_encoded}\\n\")\n",
        "# Define categorical columns (IMPORTANT: Define before using it!)\n",
        "categorical_columns = ['Gender', 'Remarks']\n",
        "# Initialize OneHotEncoder\n",
        "encoder = OneHotEncoder(drop='first', sparse_output=False) # drop='first' to match pandas'\n",
        "drop_first=True\n",
        "# Fit and transform categorical data\n",
        "one_hot_encoded = encoder.fit_transform(df[categorical_columns])\n",
        "# Create a DataFrame with the new columns\n",
        "one_hot_df = pd.DataFrame(one_hot_encoded,\n",
        "columns=encoder.get_feature_names_out(categorical_columns))\n",
        "# Concatenate the encoded data with the original DataFrame (excluding the original categorical\n",
        "columns)\n",
        "df_sklearn_encoded = pd.concat([df.drop(categorical_columns, axis=1), one_hot_df], axis=1)\n",
        "print(f\"One-Hot Encoded Data using Scikit-Learn:\\n{df_sklearn_encoded}\\n\")"
      ]
    }
  ]
}